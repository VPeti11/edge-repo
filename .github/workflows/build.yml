name: Install AUR packages and update repo

on:
  schedule:
    - cron: "0 7 * * 3"  # Every Wednesday at 7:00 AM
  workflow_dispatch:

jobs:
  aur-install:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest

    steps:
      - name: Create non-root user
        run: |
          useradd -m builder
          echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          mkdir -p /home/builder/aurbuild
          chown -R builder:builder /home/builder

      - name: Install base-devel and git
        run: pacman -Sy --noconfirm base-devel git

      - name: Clone yay-bin from AUR
        run: su - builder -c 'curl -o PKGBUILD https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=yay-bin'

      - name: Build and install yay
        run: |
          su - builder -c 'cd /home/builder/ && makepkg -si --noconfirm'

      - name: Install AUR packages with yay
        run: |
          su - builder -c 'yay --noconfirm --save --builddir /home/builder/aurbuild -S \
            antimicrox-git lutris-git balena-etcher mkinitcpio-openswap \
            betterdiscord-installer-bin moonlight-qt-bin bottles opengamepadui-bin \
            patool coolercontrol-bin peazip-qt-bin \
            coolercontrold-bin polychromatic-git protonup-qt-bin \
            python-fvs python-pathvalidate python-steamgriddb \
            sunshine-bin downgrade electron17-bin trizen gzdoom-bin vkbasalt-cli \
            icoextract lgogdownloader libcprime yay-bin \
            libcsys zmusic linux-firmware-valve'

      - name: Filter and copy non-debug packages
        run: |
          mkdir -p /home/builder/artifacts
          find /home/builder/aurbuild -maxdepth 1 -type f -name '*.pkg.tar.zst' ! -name '*-debug-*.pkg.tar.zst' \
            -exec cp {} /home/builder/artifacts/ \;

      - name: Rename packages (strip extensions)
        run: |
          cd /home/builder/artifacts
          for f in *.pkg.tar.zst; do
            base=$(echo "$f" | sed 's/-[^-]*-[^-]*\.pkg\.tar\.zst$//')
            mv "$f" "$base.pkg.tar.zst"
          done

      - name: Upload AUR packages
        uses: actions/upload-artifact@v4
        with:
          name: aur-packages
          path: /home/builder/artifacts/*.pkg.tar.zst

  update-repo:
    runs-on: ubuntu-latest
    needs: aur-install

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: staging

      - name: Download AUR packages
        uses: actions/download-artifact@v4
        with:
          name: aur-packages
          path: ./x86_64

      - name: Clean x86_64 directory
        run: rm -f ./x86_64/*

      - name: Import GPG private key
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Trust GPG key
        run: |
          echo "53407B947EBAD024A4645885A139E9B289DC7527:6:" | gpg --import-ownertrust

      - name: Generate repo database
        run: |
          cd x86_64
          repo-add -s -k 53407B947EBAD024A4645885A139E9B289DC7527 edge-repo.db.tar.gz *.pkg.tar.zst

      - name: Sign packages
        run: |
          for pkg in ./x86_64/*.pkg.tar.zst; do
            gpg --armor --detach-sign --local-user 53407B947EBAD024A4645885A139E9B289DC7527 "$pkg"
          done

      - name: Rename .asc to .sig
        run: |
          cd x86_64
          for file in *.asc; do
            if [ -f "$file" ]; then
              mv "$file" "${file%.asc}.sig"
            fi
          done

      - name: Commit and push to staging
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add x86_64/*
          git commit -m "Update repo with signed packages"
          git push origin staging
